/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package voronoidiagram;

import java.awt.Color;
import java.util.ArrayList;
import java.util.Random;
import java.awt.Graphics;
import javax.swing.JFrame;
import static javax.swing.JFrame.EXIT_ON_CLOSE;

public class VoronoiDiagramFrame extends javax.swing.JFrame {
    
    ArrayList<Point2D> pointArray = new ArrayList<Point2D>();
    ArrayList<Edge> edgeArray = new ArrayList<Edge>();
    ArrayList<VoronoiCell> cellArray = new ArrayList<VoronoiCell>();

    /**
     * Creates new form VoronoiDiagramFrame
     */
    public VoronoiDiagramFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        numPoints = new javax.swing.JTextField();
        generatePoints = new javax.swing.JButton();
        drawPoints = new javax.swing.JButton();
        triangulate = new javax.swing.JButton();
        drawTriangulation = new javax.swing.JButton();
        drawCells = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        numPoints.setText("Number of Points");

        generatePoints.setText("Generate");
        generatePoints.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generatePointsActionPerformed(evt);
            }
        });

        drawPoints.setText("Draw Points");
        drawPoints.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawPointsActionPerformed(evt);
            }
        });

        triangulate.setText("Triangulation");
        triangulate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                triangulateActionPerformed(evt);
            }
        });

        drawTriangulation.setText("Draw Triangulation");
        drawTriangulation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawTriangulationActionPerformed(evt);
            }
        });

        drawCells.setText("Draw Diagram");
        drawCells.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawCellsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(generatePoints)
                        .addGap(46, 46, 46))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(drawPoints)
                            .addComponent(triangulate))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(numPoints, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(drawTriangulation, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(drawCells))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numPoints, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(generatePoints))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(drawCells)
                    .addComponent(drawPoints))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(drawTriangulation)
                    .addComponent(triangulate))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public Point2D createRandomPoint() {
        
        //creates a random point anywhere on the panel
        Random r = new Random();
        
        int x = r.nextInt(800);
        int y = r.nextInt(800);
        
        return new Point2D(x, y);
        
    }
    
    public void triangulate() {
        
        //triangulates the array of points arbitrarily
        Point2D[] p = new Point2D[pointArray.size()];
        p = pointArray.toArray(p);
        
        edgeArray.add(new Edge(p[0], p[1]));
        edgeArray.add(new Edge(p[0], p[2]));
        edgeArray.add(new Edge(p[1], p[2]));
        
        for (int i=3; i<p.length; i++) {
            
            edgeArray.add(new Edge(p[i-1], p[i]));
            
            Edge[] e = new Edge[edgeArray.size()];
            e = edgeArray.toArray(e);

            //checks if more edges can be added with the new point
            for (int j=0; j<i; j++) {
                            
                boolean intersectionCheck = false;
                
                Edge s = new Edge(p[i], p[j]);
                
                //checks if a potential edge intersects another edge
                for (int k=0; k<e.length; k++) {
                    
                    if (s.checkIntersection(e[k])) {
                        intersectionCheck = true;
                    }
                    
                }
                //If it did not intersect add it to the array
                if (intersectionCheck == false) {
                    
                    edgeArray.add(new Edge(p[i], p[j]));
                    
                }
                
            }
            
        }
        
    }
    
    private void generatePointsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generatePointsActionPerformed
        
        //generates a number of random points specified by the user
        int nPoints = Integer.parseInt(numPoints.getText());
        
        for (int i=0; i<nPoints; i++) {
            
            pointArray.add(createRandomPoint());
            
        }
        
    }//GEN-LAST:event_generatePointsActionPerformed

    private void drawPointsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawPointsActionPerformed
        //draws the points
        DrawingBoard a = new DrawingBoard(true, false, false, pointArray, edgeArray, cellArray);
        a.initializeWindow(); 
        a.setVisible(true);
    }//GEN-LAST:event_drawPointsActionPerformed

    private void drawTriangulationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawTriangulationActionPerformed
        //draws the edges
        DrawingBoard b = new DrawingBoard(false, true, false, pointArray, edgeArray, cellArray);
        b.initializeWindow();
        b.setVisible(true);
    }//GEN-LAST:event_drawTriangulationActionPerformed

    private void drawCellsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawCellsActionPerformed
        //draws the cells
        DrawingBoard c = new DrawingBoard(false, false, true, pointArray, edgeArray, cellArray);
        c.initializeWindow();
        c.setVisible(true);
    }//GEN-LAST:event_drawCellsActionPerformed

    private void triangulateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_triangulateActionPerformed
    
        triangulate();       
    }//GEN-LAST:event_triangulateActionPerformed

    /**
     * @param args the command line arguments
     */
    

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VoronoiDiagramFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VoronoiDiagramFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VoronoiDiagramFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VoronoiDiagramFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VoronoiDiagramFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton drawCells;
    private javax.swing.JButton drawPoints;
    private javax.swing.JButton drawTriangulation;
    private javax.swing.JButton generatePoints;
    private javax.swing.JTextField numPoints;
    private javax.swing.JButton triangulate;
    // End of variables declaration//GEN-END:variables
}
